
<%
  today = Time.now.strftime("%Y-%m-%d")
  
  hashDeviceClass = Hash.new(0)
  hashOperatingSystem  = Hash.new(0)
  hashDeviceType = Hash.new(0)


  @deviceinfos.each do |devinfo|
    
    devinfo.devicetype = "Unknown" if devinfo.devicetype.empty?
    devinfo.deviceclass = "Unknown" if devinfo.deviceclass.empty?
    devinfo.operatingsystem = "Unknown" if devinfo.operatingsystem.empty?

    hashDeviceType[devinfo.devicetype] += 1
    hashDeviceClass[devinfo.deviceclass] += 1
    hashOperatingSystem[devinfo.operatingsystem] += 1
  end
  
%>

<div id="content" class="span10">
<!-- content starts -->
   <div class="sortable row-fluid">
      <!-- Summary counters - START -->
      <a data-rel="tooltip" title="Total number of unique devices detected so far." 
         class="well span3 top-block" href="/tbl_inventory">
         <span class="icon32 icon-red icon-web"></span>
	 <div>Total Devices</div>
	 <div><%= @deviceinfos.count %></div>
	 <span class="notification green">
            <%= @deviceinfos.count { |x| x.created_at >= today } %>
         </span>
      </a>

      <a data-rel="tooltip" title="Total number of unique users detected." 
         class="well span3 top-block" href="/tbl_inventory">
         <span class="icon32 icon-green icon-users"></span>
	 <div>Total Users</div>
	 <div><%= @deviceinfos.uniq{|x|x.username}.count %></div>
	 <span class="notification green">
            <%= @deviceinfos.select{ |x| x.created_at >= today }.uniq{|x|x.username}.count %>
         </span>
      </a>

      <a data-rel="tooltip" title="Internal/Corporate Servers to which the devices connected." 
         class="well span3 top-block" href="/dash_bw">
         <span class="icon32 icon-blue icon-briefcase-new"></span>
	 <div>Assets</div>
	 <div><%= Ipstat.select(:destip).uniq.length %></div>
	 <span class="notification">0</span>
      </a>
				
      <a data-rel="tooltip" title="Total Vulnerability/Intrusion alerts raised so far." 
         class="well span3 top-block" href="#">
	 <span class="icon32 icon-color icon-alert"></span>
	 <div>CVE/Snort Alerts</div>
	 <div><%= Alertdb.count %></div>
	 <span class="notification red">0</span>
      </a>

      <!-- Summary counters - END -->

   </div>


   <div class="row-fluid sortable">		
      <div class="box span4">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Device Types",
                                 :header_link  => "/tbl_inventory" }
         %>
         <div class="box-content">
            <canvas id="dev_type_pie" >[No canvas support]</canvas>
         </div> <!-- box-content -->
      </div> <!-- box span4 -->


      <div class="box span4">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Operating Systems",
                                 :header_link  => "/tbl_inventory" }
         %>
         <div class="box-content">
            <canvas id="devinfo_os_hbar">[No canvas support]</canvas>
         </div> <!-- box-content -->
      </div> <!-- box span4 -->

      <div class="box span4">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Device Categories",
                                 :header_link  => "/tbl_inventory" }
         %>
         <div class="box-content center ">
	          <div class="sortable row-fluid" style="#position: absolute; overflow: hidden; vertical-align: center">
	             <div class="well span4 top-block" >
		              <div>Laptop</div>
                  <a href='/tbl_inventory'>
		                 <span class="icon-laptop icon-4x"></span>
                  </a>
		              <div><%= hashDeviceClass["Desktop/Laptop"] %> </div>
               </div>
	             <div class="well span4 top-block" >
		              <div>Phone</div>
                  <a class="ajax-link" href='/tbl_inventory'>
		                 <span class="icon-mobile-phone icon-4x"></span>
                  </a>
		              <div><%= hashDeviceClass["MobileDevice"] %> </div>
               </div>
            </div> <!-- sortable -->
         </div> <!-- box-content -->
      </div> <!-- box span4 -->
   </div><!-- row-fluid sortable -->
</div><!-- content ends -->


<script type="text/javascript">
   function roundNumber(rnum, rlength) {
     var newnumber = Math.round(rnum*Math.pow(10,rlength))/Math.pow(10,rlength);
     return parseFloat(newnumber);
   }


   window.onload = function (){
     var labels = <%=raw hashOperatingSystem.keys %>;
     var data = <%=raw hashOperatingSystem.values %>;

     var total = 0;
     for (var i=0; i < data.length; i++) {
       total += data[i];
     }

     //resize the canvas appropriately
     document.body.onresize = function () {
       var pieCanvas = document.getElementById('dev_type_pie');
       pieCanvas.width = pieCanvas.parentNode.clientWidth;
       pieCanvas.height = pieCanvas.parentNode.clientHeight * 2;

       var hbarCanvas = document.getElementById('devinfo_os_hbar');
       hbarCanvas.width = hbarCanvas.parentNode.clientWidth;
       hbarCanvas.height = hbarCanvas.parentNode.clientHeight * 2;
     }

     document.body.onresize();

     var hbar = new RGraph.HBar('dev_type_pie', <%= hashDeviceType.values %>);
     hbar.Set('chart.labels.above', true);
     hbar.Set('chart.vmargin', 15); 
     hbar.Set('chart.labels', <%=raw hashDeviceType.keys %>);
     hbar.Set('chart.background.grid', false);
     hbar.Set('chart.strokestyle', 'rgba(0,0,0,0)');
     hbar.Set('chart.colors', ['#FF7300','#FFCD00','#00B869','#999','#A0D300','#EC0033']);
     hbar.Set('chart.colors.sequential', true);
     hbar.Set('chart.labels.above.decimals', 0);
     hbar.Set('chart.xlabels', false);
     hbar.Set('chart.noxaxis', true);
     hbar.Set('chart.noxtickmarks', true);
     hbar.Set('chart.noytickmarks', true); 
     hbar.Set('chart.gutter.left', (document.getElementById('devinfo_os_hbar').width * 0.3));

     if (!RGraph.isOld()) {
        hbar.Set('chart.tooltips', <%=raw hashDeviceType.keys %>);
        hbar.Set('chart.tooltips.event', 'onmousemove');

        RGraph.Effects.HBar.Grow(hbar);
     } else {
        hbar.Draw();
     } 

     var pie = new RGraph.Pie('devinfo_os_hbar', data);
     pie.Set('chart.colors', ['#DDDF0D','#7798BF', '#ABD874', '#E18D87', '#599FD9', '#F4AD7C', '#D5BBE5']);
     //pie.Set('chart.colors', ['Gradient(white:#004CB0)','Gradient(white:#FF7300)','Gradient(white:#FFCD00)','Gradient(white:#00B869)','Gradient(white:#999)','Gradient(white:#A0D300)','Gradient(white:#EC0033)']);
     pie.Set('chart.strokestyle', 'white');
     pie.Set('chart.linewidth', 3);
     pie.Set('chart.text.size', 6);
     pie.Set('chart.text.font', "Comic Sans");
     pie.Set('chart.exploded', 7);
     pie.Set('chart.shadow', false);
     pie.Set('chart.shadow.offsetx', 2);
     pie.Set('chart.shadow.offsety', 2);
     pie.Set('chart.shadow.blur', 3);
     pie.Set('chart.shadow.color', '#bbb');
     pie.Set('chart.labels.ingraph', true);
     pie.Set('chart.labels.position', 'gutter');
     pie.Set('chart.tooltips', labels);
     pie.Set('chart.tooltips.event', 'onmousemove');

     for (var i=0; i< labels.length; i++) {
       labels[i] = labels[i] + ' ' + roundNumber(data[i]/total*100, 0) + '%';
     }
     pie.Set('chart.labels.ingraph.specific', labels);
     

     RGraph.Effects.Pie.RoundRobin(pie);


   };
</script>
