<%

# Selecting the top 10 servers to display in the bandwidth line graph
hashGraphTimeBasedTotals = Hash[@hashTimeIntervalData.sort_by {|key, value| value.reduce(:+)}.reverse[0..10]]

# Move the hashmap values (in circular fashion) so that the current time 
# is always the last one on the rightmost edge of the graph
currentTime = Time.now.strftime("%H").to_i 
hashGraphTimeBasedTotals.each do |i, arrayTotals|
   arrayTotals.map! {|e| e/$BW_MEASURE }
  arrayTotals.rotate!(currentTime+1)
end


# Servers (sorted in descending order of Total bytes) for the dataTable
hashResources = Hash[@hashResourceTotals.sort_by {|key, value| value.reduce(:+)}.reverse]
# Devices (sorted in descending order of Total bytes) for the dataTable
hashDevices = Hash[@hashDeviceTotals.sort_by {|key, value| value.reduce(:+)}.reverse]

%>
<style>
.tb5 {
	border:2px solid #456879;
	border-radius:10px;
	height: 22px;
	width: 230px;
}
</style>

<!-- content starts -->
<div id="content" class="span10">

<form id="report_form" action="" method="GET">
			  <select id="rpt_type" class="chosen" style="width:200px;">
				<option>Total bandwidth</option>
				<option>Internal servers</option>
				<option>External severs</option>
				<option>Internal applications</option>
				<option>External applications</option>
			  </select>
			  <select id="rpt_time" class="chosen" style="width:200px;" disable_search="true">
				<option>Today</option>
				<option>Last 24 hours</option>
				<option>Last week</option>
				<option>Last month</option>
				<option>Choose date</option>
			  </select>
			<input  style="visibility:hidden;" class="input-xlarge datepicker" id="fromdate" value="from" type="text" style="width:200px;" >
			<input  style="visibility:hidden;" class="input-xlarge datepicker" id="todate" value="to" type="text" style="width:200px;">
			<button class="btn btn-primary" onclick="sendReportQuery()">Go</button>
</form>

   <div class="row-fluid sortable">		
      <div class="box span12">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Bandwidth Consumption (Today)",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <canvas id="total_bw">[No canvas support]</canvas>
         </div>
      </div> <!-- box span12 -->
   </div><!-- row-fluid sortable -->

   <div class="row-fluid sorttable">
      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Top Servers",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	          <tr>
	             <th>Server</th>
		           <th><%= "Incoming #{bandwidth_label} " %></th>
               <th><%= "Outgoing #{bandwidth_label} " %></th>
               <th><%= "Total    #{bandwidth_label} " %></th>
	          </tr>
	       </thead>   
	       <tbody>
               <% hashResources.each do | server_ip, arrayTotals | %>
                     <tr>
                        <td><%= link_to server_ip, :action => "dash_bw_server", :server_ip => server_ip %></td>
                        <td><%= sprintf("%.2f", arrayTotals[0]/$BW_MEASURE) %></td>
                        <td><%= sprintf("%.2f", arrayTotals[1]/$BW_MEASURE) %></td>
                        <td><%= sprintf("%.2f", arrayTotals.reduce(:+)/$BW_MEASURE) %></td>
                     </tr>
               <% end %>
               
               </tbody>
            </table>
         </div> <!-- box-content -->
      </div> <!-- box span6 -->

      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Top Devices",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	                <tr>
	                   <th>Device</th>
                     <th><%= "Incoming #{bandwidth_label} " %></th>
                     <th><%= "Outgoing #{bandwidth_label} " %></th>
                     <th><%= "Total    #{bandwidth_label} " %></th>
	                </tr>
	             </thead>   
	             <tbody>
               <% hashDevices.each do | device, arrayTotals | %>                     
                  <tr>
                     <td><%= link_to device,  :action => "device_details", :device => device %></td>
                     <td><%= sprintf("%.2f", arrayTotals[0]/$BW_MEASURE) %></td>
                     <td><%= sprintf("%.2f", arrayTotals[1]/$BW_MEASURE) %></td>
                     <td><%= sprintf("%.2f", arrayTotals.reduce(:+)/$BW_MEASURE) %></td>
                  </tr>
               <% end %>
               </tbody>
            </table>
            </div> <!-- box-content -->
         </div> <!-- box span6 -->
   </div><!-- row-fluid sortable -->
</div><!-- content ends -->


<script type="text/javascript">

jQuery(document).ready(function(){
	jQuery(".chosen").chosen();
});

	$(function() {
    $( "#fromdate" ).datepicker({
      changeMonth: true,
      changeYear: true
    });
  });
	$(function() {
    $( "#todate" ).datepicker({
      changeMonth: true,
      changeYear: true
    });
  });
        Array.max = function( array ){
            return Math.max.apply( Math, array );
        };

        window.onload = function ()
        {
            //Resize the canvas element
            document.body.onresize = function () {
              var canvas = document.getElementById('total_bw');
              canvas.width = canvas.parentNode.clientWidth * 0.9;
              canvas.height = canvas.parentNode.clientHeight * 1.5;
            }
            document.body.onresize();


	   var rptTime = getParam("time");


            var myLine = new RGraph.Line('total_bw', <%= hashGraphTimeBasedTotals.values %>);
	    if (rptTime == 0) {
            myLine.Set('labels', <%=raw graphLabels24Hrs.map { |i| i.to_s } %>);
	    } else if (rptTime == 1) {
                myLine.Set('labels', <%=raw graphLabels24Hrs.rotate((Time.now.strftime("%H").to_i)+1).map { |i| i.to_s } %>);
            } else if (rptTime == 2) {
                myLine.Set('labels', <%=raw graphLabelsWeek.map { |i| i.to_s } %>);
            }  else if (rptTime == 3) {
                myLine.Set('labels', <%=raw graphLabelsMonth.map { |i| i.to_s } %>);
            }

            myLine.Set('key.color.shape', 'circle');
            myLine.Set('key.position', 'graph');

            myLine.Set('key', <%=raw hashGraphTimeBasedTotals.keys %>);
            myLine.Set('linewidth', 5);
            myLine.Set('background.grid.autofit.numvlines', 24);
            myLine.Set('background.grid.autofit.numhlines', 20);

            myLine.Set('colors', ['red', 'black','#DDDF0D','#7798BF', '#ABD874', '#E18D87', '#599FD9', '#F4AD7C', '#D5BBE5']);
            myLine.Set('text.color', '#333');
            myLine.Set('text.font', 'Arial');
            myLine.Set('background.grid.autofit', true);
            myLine.Set('shadow', true);
            myLine.Set('shadow.color', 'rgba(20,20,20,0.3)');
            myLine.Set('shadow.blur',  10);
            myLine.Set('shadow.offsetx', 0);
            myLine.Set('shadow.offsety', 0);
            myLine.Set('background.grid.border', true);
            myLine.Set('axis.color', '#666');
            myLine.Set('text.color', '#666');
            myLine.Set('key.interactive', true);
            myLine.Set('spline', true);
            myLine.Set('title', '<%= "Bandwidth #{bandwidth_label}" %>');
            myLine.Set('gutter.left', 70);
            //myLine.Set('tickmarks', 'circle');


            /**
            * Use the Trace animation to show the chart
            */
            if (RGraph.isOld() || (Array.max(myLine.data_arr) < 5)) {
                // IE7/8 don't support shadow blur, so set custom shadow properties
                myLine.Set('shadow.offsetx', 3);
                myLine.Set('shadow.offsety', 3);
                myLine.Set('shadow.color', '#aaa');
                myLine.Draw();
            } else {
                RGraph.Effects.Line.jQuery.UnfoldFromCenterTrace(myLine, {'duration': 1000});
                myLine.Draw();
            }
        }



document.getElementById("rpt_time").onchange = function(){
var selIndex = document.getElementById("rpt_time").selectedIndex;
var selValue = document.getElementById("rpt_time").options[selIndex].innerHTML;

if (selValue == "Choose date") {
	document.getElementById("fromdate").style.visibility = "visible";
	document.getElementById("todate").style.visibility = "visible";
} else {
	document.getElementById("fromdate").style.visibility = "hidden";
	document.getElementById("todate").style.visibility = "hidden";
}

}


$("#report_form").submit(function(e) {
       e.preventDefault();
});

function sendReportQuery() {
	var selTimeIndex = document.getElementById("rpt_time").selectedIndex;
	var selTimeValue = document.getElementById("rpt_time").options[selTimeIndex].innerHTML;
	var selRptIndex = document.getElementById("rpt_type").selectedIndex;
	var selRptValue = document.getElementById("rpt_type").options[selRptIndex].innerHTML;
	var fromdateValue = document.getElementById("fromdate").value;	
	var todateValue = document.getElementById("todate").value;	
	var fromDate = "";
	var toDate = "";
	if (selTimeValue == "Choose date") {
		fromDate = new Date(fromdateValue);
		fromDate = fromDate.getTime()/1000.0;
		toDate = new Date(todateValue);
		toDate = toDate.getTime()/1000.0;
	}
	else if (selTimeValue == "Today" ) {
		var today = new Date()
		alert(today);
		var d1 = new Date(today.getFullYear(), today.getMonth(), today.getDate());
		fromDate = d1.getTime()/1000.0;
		toDate =  new Date();
		toDate = toDate.getTime()/1000.0;

	}
	else if (selTimeValue == "Last 24 hours" ) {
		toDate =  new Date();
		toDate = toDate.getTime()/1000.0;
		fromDate = toDate - (1 * 86400);
		
	}
	else if (selTimeValue == "Last week" ) {
		toDate =  new Date();
		toDate = toDate.getTime()/1000;
		fromDate = toDate - (7 * 86400);
	}
	else if (selTimeValue == "Last month" ) {
		toDate =  new Date();
		toDate = toDate.getTime()/1000;
		fromDate = toDate - (30 * 86400);
	}
	
	var url = window.location.href
	if (url.indexOf("?")>-1){
		url = url.substr(0,url.indexOf("?"));
	}
	url = url.concat("?");
	url = url.concat("type=");
	url = url.concat(selRptValue);	
	url = url.concat("&");
	url = url.concat("time=");
	url = url.concat(selTimeIndex);	
	url = url.concat("&");
	url = url.concat("from=");
	url = url.concat(fromDate);	
	url = url.concat("&");
	url = url.concat("to=");
	url = url.concat(toDate);	
	window.location.assign(url);
}

function getParam ( sname )
{
  var params = location.search.substr(location.search.indexOf("?")+1);
  var sval = "";
  params = params.split("&");
    // split param and value into individual pieces
    for (var i=0; i<params.length; i++)
       {
         temp = params[i].split("=");
         if ( [temp[0]] == sname ) { sval = temp[1]; }
       }
  return sval;
}

</script>

