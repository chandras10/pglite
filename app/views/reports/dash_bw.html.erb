<%

# Selecting the top 10 servers to display in the bandwidth line graph
hashGraphTimeBasedTotals = Hash[@hashTimeIntervalData.sort_by {|key, value| value.reduce(:+)}.reverse[0..10]]

# Move the hashmap values (in circular fashion) so that the current time 
# is always the last one on the rightmost edge of the graph
currentTime = Time.now.strftime("%H").to_i 
hashGraphTimeBasedTotals.each do |i, arrayTotals|
  arrayTotals.rotate!(currentTime+1)
end

# Servers (sorted in descending order of Total bytes) for the dataTable
hashServers = Hash[@hashServerTotals.sort_by {|key, value| value.reduce(:+)}.reverse]
# Devices (sorted in descending order of Total bytes) for the dataTable
hashDevices = Hash[@hashDeviceTotals.sort_by {|key, value| value.reduce(:+)}.reverse]

%>

<!-- content starts -->
<div id="content" class="span10">
   <div class="row-fluid sortable">		
      <div class="box span12">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Bandwidth Consumption (Past 24 Hours)",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <canvas id="total_bw">[No canvas support]</canvas>
         </div>
      </div> <!-- box span12 -->
   </div><!-- row-fluid sortable -->

   <div class="row-fluid sorttable">
      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Top Servers",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	          <tr>
	             <th>Server</th>
		     <th>Incoming (Mbytes) </th>
                     <th>Outgoing (Mbytes)</th>
                     <th>Total (MBytes)</th>
	          </tr>
	       </thead>   
	       <tbody>
               <% hashServers.each do | server_ip, arrayTotals | %>
                     <tr>
                        <td><%= link_to server_ip, :action => "dash_bw_server", :server_ip => server_ip %></td>
                        <td><%= arrayTotals[0] %></td>
                        <td><%= arrayTotals[1] %></td>
                        <td><%= arrayTotals.reduce(:+) %></td>
                     </tr>
               <% end %>
               
               </tbody>
            </table>
         </div> <!-- box-content -->
      </div> <!-- box span6 -->

      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Top Devices",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	                <tr>
	                   <th>Device</th>
		                 <th>Incoming (Mbytes) </th>
                     <th>Outgoing (Mbytes)</th>
                     <th>Total (MBytes)</th>
	                </tr>
	             </thead>   
	             <tbody>
               <% hashDevices.each do | device, arrayTotals | %>                     
                  <tr>
                     <td><%= device %></td>
                     <td><%= arrayTotals[0] %></td>
                     <td><%= arrayTotals[1] %></td>
                     <td><%= arrayTotals.reduce(:+) %></td>
                  </tr>
               <% end %>
               </tbody>
            </table>
            </div> <!-- box-content -->
         </div> <!-- box span6 -->
   </div><!-- row-fluid sortable -->
</div><!-- content ends -->


<script type="text/javascript">
        window.onload = function ()
        {
            //Resize the canvas element
            document.body.onresize = function () {
              var canvas = document.getElementById('total_bw');
              canvas.width = canvas.parentNode.clientWidth * 0.9;
              canvas.height = canvas.parentNode.clientHeight * 1.5;
            }
            document.body.onresize();

            var myLine = new RGraph.Line('total_bw', <%= hashGraphTimeBasedTotals.values %>);
            myLine.Set('chart.labels', <%=raw graphLabels24Hrs.map { |i| i.to_s } %>);

            myLine.Set('chart.key', <%=raw hashGraphTimeBasedTotals.keys %>);
            myLine.Set('chart.key.color.shape', 'circle');
            myLine.Set('chart.key.position', 'graph');

            myLine.Set('chart.linewidth', 5);
            myLine.Set('chart.background.grid.autofit.numvlines', 24);
            myLine.Set('chart.background.grid.autofit.numhlines', 20);

            myLine.Set('chart.colors', ['red', 'black','#DDDF0D','#7798BF', '#ABD874', '#E18D87', '#599FD9', '#F4AD7C', '#D5BBE5']);
            myLine.Set('chart.text.color', '#333');
            myLine.Set('chart.text.font', 'Arial');
            myLine.Set('chart.background.grid.autofit', true);
            myLine.Set('chart.shadow', true);
            myLine.Set('chart.shadow.color', 'rgba(20,20,20,0.3)');
            myLine.Set('chart.shadow.blur',  10);
            myLine.Set('chart.shadow.offsetx', 0);
            myLine.Set('chart.shadow.offsety', 0);
            myLine.Set('chart.background.grid.border', true);
            myLine.Set('chart.axis.color', '#666');
            myLine.Set('chart.text.color', '#666');
            myLine.Set('chart.key.interactive', true);
            myLine.Set('chart.spline', true);
            myLine.Set('chart.title', 'Bandwidth (Mbytes)');
            //myLine.Set('chart.tickmarks', 'circle');


            /**
            * Use the Trace animation to show the chart
            */
            if (RGraph.isOld()) {
                // IE7/8 don't support shadow blur, so set custom shadow properties
                myLine.Set('chart.shadow.offsetx', 3);
                myLine.Set('chart.shadow.offsety', 3);
                myLine.Set('chart.shadow.color', '#aaa');
                myLine.Draw();
            } else {
                RGraph.Effects.Line.jQuery.UnfoldFromCenterTrace(myLine, {'duration': 1000});
            }
        }
</script>

