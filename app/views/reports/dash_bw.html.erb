<style type="text/css">
</style>
<%

   # Selecting the top 10 servers to display in the bandwidth line graph
   hashGraphTimeBasedTotals = Hash[@hashTimeIntervalData.sort_by {|key, value| value.reduce(:+)}.reverse[0..10]]

   # Move the hashmap values (in circular fashion) so that the current time 
   # is always the last one on the rightmost edge of the graph
   currentTime = Time.now.strftime("%H").to_i 
   hashGraphTimeBasedTotals.each do |i, arrayTotals|
      arrayTotals.map! {|e| e/$BW_MEASURE }
#      arrayTotals.rotate!(currentTime+1)
   end


   # Servers (sorted in descending order of Total bytes) for the dataTable
   hashResources = Hash[@hashResourceTotals.sort_by {|key, value| value.reduce(:+)}.reverse]
   # Devices (sorted in descending order of Total bytes) for the dataTable
   hashDevices = Hash[@hashDeviceTotals.sort_by {|key, value| value.reduce(:+)}.reverse]

   case params[:reportType]
   when "internalIP"
      resourcesTitle = "Internal Servers"
   when "internalAPP"
      resourcesTitle = "Internal Applications"
   when "externalIP"
      resourcesTitle = "External Servers"
   when "externalAPP"
      resourcesTitle = "External Applications"
   else
      resourcesTitle = "Servers"
   end

%>
<!-- content starts -->
<div id="content" class="span10">

        <div class="control-group">
    			  <select id="reportType" class="chosen">
    				    <option value="total">Total bandwidth</option>
    				    <option value="internalIP">Internal Resources</option>
    				    <option value="externalIP">External Resources</option>
    				    <option value="internalAPP">Internal Applications</option>
    				    <option value="externalAPP">External Applications</option>
    			  </select>
    			  <select id="reportTime" class="chosen">
    				   <option value="today">Today</option>
    				   <option value="past_day">Past 24 hours</option>
    				   <option value="past_week">Past week</option>
    				   <option value="past_month">Past month</option>
    				   <option value="date_range">Choose date</option>
    			  </select>
          
            <button class="btn btn-primary" id="refreshBtn">Refresh</button>

        </div>
        <div class="control-group" id="dateRange">
    			  <input   class="datepicker" id="fromDate" value="From" type="text" >
    			  <input   class="datepicker" id="toDate" value="To" type="text">
        </div>

   <div class="row-fluid sortable">		
      <div class="box span12">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Resource Consumption",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <canvas id="bw_graph_canvas">[No canvas support]</canvas>
         </div>
      </div> <!-- box span12 -->
   </div><!-- row-fluid sortable -->

   <div class="row-fluid sorttable">
      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title =>  resourcesTitle,
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	          <tr>
	             <th>Server</th>
		           <th><%= "Incoming #{bandwidth_label} " %></th>
               <th><%= "Outgoing #{bandwidth_label} " %></th>
               <th><%= "Total    #{bandwidth_label} " %></th>
	          </tr>
	       </thead>   
	       <tbody>
               <% hashResources.each do | server_ip, arrayTotals | %>
                     <tr>
                        <td><%= link_to server_ip, :action => "dash_bw_server", :server_ip => server_ip %></td>
                        <td><%= sprintf("%.2f", arrayTotals[0]/$BW_MEASURE) %></td>
                        <td><%= sprintf("%.2f", arrayTotals[1]/$BW_MEASURE) %></td>
                        <td><%= sprintf("%.2f", arrayTotals.reduce(:+)/$BW_MEASURE) %></td>
                     </tr>
               <% end %>
               
               </tbody>
            </table>
         </div> <!-- box-content -->
      </div> <!-- box span6 -->

      <div class="box span6">
         <%= render :partial => 'layouts/title_bar_icons',
                    :locals => { :header_title => "Client Devices",
                                 :header_link  => "#" }
         %>
         <div class="box-content">
            <table class="table table-striped table-bordered bootstrap-datatable datatable">
               <thead>
	                <tr>
	                   <th>Device</th>
                     <th><%= "Incoming #{bandwidth_label} " %></th>
                     <th><%= "Outgoing #{bandwidth_label} " %></th>
                     <th><%= "Total    #{bandwidth_label} " %></th>
	                </tr>
	             </thead>   
	             <tbody>
               <% hashDevices.each do | device, arrayTotals | %>                     
                  <tr>
                     <td><%= link_to device,  :action => "device_details", :device => device %></td>
                     <td><%= sprintf("%.2f", arrayTotals[0]/$BW_MEASURE) %></td>
                     <td><%= sprintf("%.2f", arrayTotals[1]/$BW_MEASURE) %></td>
                     <td><%= sprintf("%.2f", arrayTotals.reduce(:+)/$BW_MEASURE) %></td>
                  </tr>
               <% end %>
               </tbody>
            </table>
            </div> <!-- box-content -->
         </div> <!-- box span6 -->
   </div><!-- row-fluid sortable -->
</div><!-- content ends -->


<script type="text/javascript">

   Array.max = function( array ){
      return Math.max.apply( Math, array );
   };
        
   window.onload = function () {
      //Resize the canvas element
      document.body.onresize = function () {
         var canvas = document.getElementById('bw_graph_canvas');
         canvas.width = canvas.parentNode.clientWidth * 0.9;
         canvas.height = canvas.parentNode.clientHeight * 1.5;
      }
      document.body.onresize();

      var rptTime = getParam("time");
      var myLine = new RGraph.Line('bw_graph_canvas', <%= hashGraphTimeBasedTotals.values %>);
      
            myLine.Set('labels', <%=raw bandwidthGraphTimeSlotLabels  %>);
            myLine.Set('key.color.shape', 'circle');
            myLine.Set('key.position', 'graph');

            myLine.Set('key', <%=raw hashGraphTimeBasedTotals.keys %>);
            myLine.Set('linewidth', 5);
            myLine.Set('background.grid.autofit.numvlines', <%= @numTimeSlots-1 %>);
            //myLine.Set('background.grid.autofit.numhlines', 20);

            myLine.Set('colors', ['red', 'black','#DDDF0D','#7798BF', '#ABD874', '#E18D87', '#599FD9', '#F4AD7C', '#D5BBE5']);
            myLine.Set('text.color', '#333');
            myLine.Set('text.font', 'Arial');
            myLine.Set('background.grid.autofit', true);
            myLine.Set('shadow', true);
            myLine.Set('shadow.color', 'rgba(20,20,20,0.3)');
            myLine.Set('shadow.blur',  10);
            myLine.Set('shadow.offsetx', 0);
            myLine.Set('shadow.offsety', 0);
            myLine.Set('background.grid.border', true);
            myLine.Set('axis.color', '#666');
            myLine.Set('text.color', '#666');
            myLine.Set('key.interactive', true);
            myLine.Set('spline', true);
            myLine.Set('title', '<%= "Bandwidth #{bandwidth_label}" %>');
            myLine.Set('gutter.left', 70);
            myLine.Set('gutter.right', 40);
            myLine.Set('tickmarks', 'circle');
            myLine.Set('numxticks', 0);
            myLine.Set('numyticks', 0);

            /**
            * Use the Trace animation to show the chart
            */
            if (RGraph.isOld() || (Array.max(myLine.data_arr) < 5)) {
                // IE7/8 don't support shadow blur, so set custom shadow properties
                myLine.Set('shadow.offsetx', 3);
                myLine.Set('shadow.offsety', 3);
                myLine.Set('shadow.color', '#aaa');
                myLine.Draw();
            } else {
                //RGraph.Effects.Line.jQuery.UnfoldFromCenterTrace(myLine, {'duration': 1000});
                myLine.Draw();
            }
   } //window.onload

   $(document).ready(function(){
       var fromDate, toDate;

       // Set approriate values (derived from query string) in the dropdown selections
       $("#reportType").val("<%= params['reportType'] || 'total' %>");
       $("#reportTime").val("<%= params['reportTime'] || 'today' %>");

       <% if params['reportTime'] != "date_range" then %>
          $("#dateRange").hide();
       <% else %>
          $("#dateRange").show();
          fromDate = "<%= params['fromDate'] || Date.today.to_s %>";
          $("#fromDate").val(fromDate);
          toDate = "<%= params['toDate'] || Date.today.to_s %>"
          $("#toDate").val(toDate);
       <% end %>

	     $(".chosen").chosen();
       $('.chzn-search').hide(); //Hide the search box within the dropdown

       //$("#reportType").trigger('chosen:updated');

       $("#reportTime").chosen().change(function() {
           if (this.value == "date_range") {
               $("#dateRange").show();
           } else {
               $("#dateRange").hide();
           }
       });

       $("#fromDate" ).datepicker({ 
              showAnim: "slide",        
              dateFormat: "yy-mm-dd",
              onSelect: function(dateText){
                 fromDate = dateText;
              },
              onClose: function( selectedDate ) {
                 $( "#toDate" ).datepicker( "option", "minDate", selectedDate );
              }              
       });
       $("#toDate" ).datepicker({ 
              showAnim: "slide",
              dateFormat: "yy-mm-dd",
              onSelect: function(dateText){
                 toDate = dateText;
              },
              onClose: function( selectedDate ) {
                 $( "#fromDate" ).datepicker( "option", "maxDate", selectedDate );
              } 
       });


  
  
       $('#refreshBtn').click(function() {
            var type = $('#reportType').val();
            var time = $('#reportTime').val();

            var urlString = "/dash_bw?reportType="+ type + "&reportTime=" + time;
            if (time == "date_range") {
               urlString += "&fromDate=" + fromDate + "&toDate=" + toDate;
            }
            window.location.href= urlString;
       });

   }); //document.ready()

   



function getParam ( sname )
{
  var params = location.search.substr(location.search.indexOf("?")+1);
  var sval = "";
  params = params.split("&");
    // split param and value into individual pieces
    for (var i=0; i<params.length; i++)
       {
         temp = params[i].split("=");
         if ( [temp[0]] == sname ) { sval = temp[1]; }
       }
  return sval;
}


</script>

